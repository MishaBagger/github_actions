const isDayEven = require('./date.js');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤
function runTests() {
    let passed = 0;
    let failed = 0;

    function test(name, callback) {
        try {
            callback();
            console.log(`‚úÖ ${name} passed`);
            passed++;
        } catch (error) {
            console.error(`‚ùå ${name} failed: ${error.message}`);
            failed++;
        }
    }

    // –¢–µ—Å—Ç 1: –ß—ë—Ç–Ω—ã–π –¥–µ–Ω—å
    test('should return true for even day', () => {
        const evenDay = new Date('2023-10-02'); // 2-–µ —á–∏—Å–ª–æ (—á—ë—Ç–Ω–æ–µ)
        if (!isDayEven(evenDay)) {
            throw new Error('Expected true for even day');
        }
    });

    // –¢–µ—Å—Ç 2: –ù–µ—á—ë—Ç–Ω—ã–π –¥–µ–Ω—å
    test('should return false for odd day', () => {
        const oddDay = new Date('2023-10-03'); // 3-–µ —á–∏—Å–ª–æ (–Ω–µ—á—ë—Ç–Ω–æ–µ)
        if (isDayEven(oddDay)) {
            throw new Error('Expected false for odd day');
        }
    });

    // –¢–µ—Å—Ç 3: –ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π (1-–µ —á–∏—Å–ª–æ)
    test('should return false for the first day of the month', () => {
        const firstDay = new Date('2023-10-01'); // 1-–µ —á–∏—Å–ª–æ (–Ω–µ—á—ë—Ç–Ω–æ–µ)
        if (isDayEven(firstDay)) {
            throw new Error('Expected false for the first day');
        }
    });

    // –ò—Ç–æ–≥–∏
    console.log(`\nTests passed: ${passed}, failed: ${failed}`);
    if (failed === 0) {
        console.log('üéâ All tests passed!');
    } else {
        console.error('üí• Some tests failed!');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();